{"version":3,"file":"static/js/811.d3628166.chunk.js","mappings":"8JACA,G,QAAA,CAAgB,QAAU,2BCA1B,EAA8B,gCAA9B,EAA8E,kCAA9E,EAA+H,iCAA/H,EAAwK,0BAAxK,EAAyM,yB,mBCmBzM,EAb6C,SAACA,GAI1C,OAAO,+BACH,UAAC,KAAD,CAASC,GAAI,YAAcD,EAAME,GACxBC,UAJO,SAACC,GAAD,OAAmCA,EAAMC,SAAN,UAAoBC,EAApB,YAAsCA,GAAtC,UAA2DA,EAA3D,YAA8EA,IAGjI,WAEI,gBAAKH,UAAWG,EAASC,IAAKP,EAAMQ,MAAOC,IAAI,MAC/C,iBAAMN,UAAWG,EAAjB,SAA0BN,EAAMU,aCd5C,EAA0B,yBCe1B,EATuC,SAACV,GACpC,OACI,iBAAKG,UAAWG,EAAhB,WACI,gBAAKC,IAAI,iFAAiFE,IAAI,MAC9F,0BAAOT,EAAMW,c,uCC8BnBC,GAAaC,EAAAA,EAAAA,GAAU,GAgBhBC,GAAsBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,WAA/BD,EAdsC,SAACf,GACtE,IAAKiB,EAAgBjB,EAAhBiB,aAEL,OACI,kBAAMC,SAAUD,EAAhB,WACI,SAACE,EAAA,EAAD,CAAOC,YAAa,qBACbV,KAAK,UACLW,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,EAAUZ,MAC5B,2C,wCCvBZ,GAAea,EAAAA,EAAAA,KAAuBC,EAAAA,EAAAA,KAXd,SAACC,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAGA,SAACC,GACxB,MAAO,CACHC,WAAY,SAACnB,GAAD,OAAqBkB,GAASE,EAAAA,EAAAA,GAAapB,SAIqBqB,EAAAA,EAApF,EDf8C,SAAChC,GAC3C,IAAK4B,EAA2B5B,EAA3B4B,YAAaE,EAAc9B,EAAd8B,WACdG,EAAkBL,EAAYM,QAAQC,KAAI,SAAAC,GAAM,OAAI,SAAC,GAAD,UAChCA,GAAfA,EAAOlC,OACZmC,EAAmBT,EAAYU,SAASH,KAAI,SAAAI,GAAG,OAAI,SAAC,GAAD,UAClCA,GAAZA,EAAIrC,OASb,OACI,iBAAKC,UAAWG,EAAAA,QAAhB,WACI,yBACK2B,KAEL,iBAAK9B,UAAWG,EAAAA,SAAhB,UACK+B,GACD,SAACvB,EAAD,CAAqBI,SAXX,SAACsB,GACnBV,EAAWU,EAAS7B","sources":["webpack://sn-ts/./src/Components/Dialogs/Dialogs.module.css?db5c","webpack://sn-ts/./src/Components/Dialogs/DialogComponents/DialogItem/DialogItem.module.css?8853","Components/Dialogs/DialogComponents/DialogItem/DialogsItem.tsx","webpack://sn-ts/./src/Components/Dialogs/DialogComponents/Message/Message.module.css?0f92","Components/Dialogs/DialogComponents/Message/Message.tsx","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__TB8xD\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogBlock\":\"DialogItem_dialogBlock__nXClt\",\"dialogPassive\":\"DialogItem_dialogPassive__+g77B\",\"dialogActive\":\"DialogItem_dialogActive__E9s-c\",\"image\":\"DialogItem_image__bDpw8\",\"name\":\"DialogItem_name__VfVX+\"};","import React from 'react';\r\nimport s from './DialogItem.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {dialogType} from '../../../../Redux/dialogs-reducer';\r\n\r\ntype DialogItemType = dialogType\r\n\r\nconst DialogItem: React.FC<DialogItemType> = (props) => {\r\n\r\n    const dialogBlock = (click: { isActive: boolean; }) => click.isActive ? `${s.dialogActive} ${s.dialogBlock}` : `${s.dialogPassive} ${s.dialogBlock}`\r\n\r\n    return <>\r\n        <NavLink to={'/Dialogs/' + props.id}\r\n                 className={dialogBlock}>\r\n            <img className={s.image} src={props.image} alt=\"\"/>\r\n            <span className={s.name}>{props.name}</span>\r\n        </NavLink>\r\n    </>\r\n};\r\n\r\nexport default DialogItem;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__xfgYS\"};","import React from 'react';\r\nimport s from './Message.module.css'\r\n\r\ntype MessageType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return (\r\n        <div className={s.message}>\r\n            <img src=\"https://auto.ironhorse.ru/wp-content/uploads/2021/03/e-tron-gt-tmb-550x300.jpg\" alt=\"\"/>\r\n            <span>{props.message}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Message;","import React, {ChangeEvent} from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from './DialogComponents/DialogItem/DialogsItem';\r\nimport Message from './DialogComponents/Message/Message';\r\nimport {DialogsType} from './DialogsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../common/FormControls/FormControls';\r\nimport {maxLength, required} from '../../utils/validators/validator';\r\n\r\n\r\ntype FormDataType = {\r\n    message: string\r\n}\r\n\r\nexport const Dialogs: React.FC<DialogsType> = (props) => {\r\n    let {dialogsPage, addMessage} = props\r\n    let dialogsElements = dialogsPage.dialogs.map(dialog => <DialogItem\r\n        key={dialog.id} {...dialog}/>)\r\n    let messagesElements = dialogsPage.messages.map(mes => <Message\r\n        key={mes.id} {...mes}/>)\r\n\r\n    // const messageRef = React.createRef<HTMLTextAreaElement>()\r\n    // const sendMessage = () => {alert(messageRef.current?.value)}\r\n\r\n    const addNewMessage = (formData: FormDataType) => {\r\n        addMessage(formData.message)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst maxLength5 = maxLength(3)\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    let {handleSubmit} = props\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Field placeholder={'enter your message'}\r\n                   name=\"message\"\r\n                   component={Textarea}\r\n                   validate={[required, maxLength5]}/>\r\n            <button>send</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport const AddMessageReduxForm = reduxForm<FormDataType>({form: 'message'})(AddMessageForm)\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../Redux/redux-store';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {addMessageAC, DialogsPageType} from '../../Redux/dialogs-reducer';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\nexport type MapStatePropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n    addMessage: (message: string) => void\r\n}\r\n\r\nexport type DialogsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addMessage: (message: string) => dispatch(addMessageAC(message))\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs)\r\n"],"names":["props","to","id","className","click","isActive","s","src","image","alt","name","message","maxLength5","maxLength","AddMessageReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","placeholder","component","Textarea","validate","required","compose","connect","state","dialogsPage","dispatch","addMessage","addMessageAC","withAuthRedirect","dialogsElements","dialogs","map","dialog","messagesElements","messages","mes","formData"],"sourceRoot":""}